>>> from news.models import *

# Создать двух пользователей (с помощью метода User.objects.create_user).
>>> user1 = User.objects.create(username='MAGA', first_name = 'Donald')

>>> user2 = User.objects.create(username = 'BaldEagle', first_name = 'Joe')

# Создать двух пользователей (с помощью метода User.objects.create_user).
>>> Author.objects.create(authorUser=user1)

>>> Author.objects.create(authorUser = user2)

# Добавить 4 категории в модель Category.
>>> Category.objects.create(name='Culture')

>>> Category.objects.create(name='Sports')

>>> Category.objects.create(name='IT')

>>> Category.objects.create(name='Education')

# Добавить 2 статьи и 1 новость.
>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='MAGA')),
    categoryType='ART', title='You and Your Research', text = 'some text')

>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='MAGA')),
    categoryType='NEW', title='You and Your Research News', text = 'some news  text')

>>> Post.objects.create(author=Author.objects.get(authorUser=User.objects.get(username='BaldEagle')),
    categoryType='ART', title='You and Your Research v2', text = 'some art text')


# Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).
>>> post1 = Post.objects.get(pk=1)

>>> post2 = Post.objects.get(pk=2)

>>> post3 = Post.objects.get(pk=3)

>>> cat1 = Category.objects.get(name='Culture')

>>> cat2 = Category.objects.get(name='Sports')

>>> cat3 = Category.objects.get(name='IT')

>>> cat4 = Category.objects.get(name='Education')

>>> post1.postCategory.add(cat1)

>>> post2.postCategory.add(cat2)

>>> post3.postCategory.add(cat1, cat3, cat4)


# Создать как минимум 4 комментария к разным объектам модели Post
# (в каждом объекте должен быть как минимум один комментарий).

>>> Comment.objects.create(commentUser=User.objects.get(username='MAGA'),
    commentPost= Post.objects.get(pk=2), text='cofvefe')

>>> Comment.objects.create(commentUser=User.objects.get(username='MAGA'),
    commentPost= Post.objects.get(pk=1), text='You are fired')

>>> Comment.objects.create(commentUser=User.objects.get(username='BaldEagle'),
    commentPost= Post.objects.get(pk=3), text='Hello there')

>>> Comment.objects.create(commentUser=User.objects.get(username='BaldEagle'),
    commentPost= Post.objects.get(pk=3), text='Hello there again')


# Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
>>> Post.objects.get(pk=1).like() # *10
    Post.objects.get(pk=1).dislike()

>>> Post.objects.get(pk=2).like()
    Post.objects.get(pk=2).dislike()

>>> Comment.objects.get(pk=1).like()
    Comment.objects.get(pk=1).dislike()


# Обновить рейтинги пользователей.
>>> Author.objects.get(authorUser=User.objects.get(username='MAGA')).update_rating()

>>> Author.objects.get(authorUser=User.objects.get(username='BaldEagle')).update_rating()


#Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).
>>> top = Author.objects.order_by('-ratingAuthor')[:1]
>>> for _ in top:
        _.ratingAuthor
        _.authorUser.username


# Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
  основываясь на лайках/дислайках к этой статье.
>>> topPost = Post.objects.order_by('-rating')[:1]
>>> for _ in topPost:
        print(_.dateCreated)
        print(_.author.authorUser)
        print(_.rating)
        print(_.title)
        _.preview()


# Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.
>>> comms = Comment.objects.filter(post = topPost)
>>> for _ in comms:
        print(_.dateCreated)
        print(_.commentUser)
        print(_.rating)
        print(_.text)
